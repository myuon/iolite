{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "iolite",
  "patterns": [
    {
      "include": "#modules"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#declare"
    },
    {
      "include": "#structs"
    },
    {
      "include": "#newtypes"
    },
    {
      "include": "#types"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#punctuation"
    }
  ],
  "repository": {
    "modules": {
      "patterns": [
        {
          "name": "meta.module.definition.iolite",
          "begin": "\\b(module)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.module.iolite"
            },
            "2": {
              "name": "entity.name.module.iolite"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.braces.iolite"
            }
          },
          "patterns": [
            {
              "include": "#functions"
            },
            {
              "include": "#declare"
            },
            {
              "include": "#types"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#comments"
            },
            {
              "include": "#variables"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#punctuation"
            }
          ]
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.definition.iolite",
          "begin": "\\b(fun)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.function.iolite"
            },
            "2": {
              "name": "entity.name.function.iolite"
            },
            "3": {
              "name": "punctuation.definition.parameters.iolite"
            }
          },
          "end": "\\{",
          "endCaptures": {
            "0": {
              "name": "punctuation.braces.iolite"
            }
          },
          "patterns": [
            {
              "include": "#types"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#variables"
            }
          ]
        }
      ]
    },
    "declare": {
      "patterns": [
        {
          "name": "meta.declare.definition.iolite",
          "begin": "\\b(declare)\\s+(fun)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.declare.iolite"
            },
            "2": {
              "name": "keyword.other.function.iolite"
            },
            "3": {
              "name": "entity.name.function.iolite"
            },
            "4": {
              "name": "punctuation.definition.parameters.iolite"
            }
          },
          "end": ";",
          "endCaptures": {
            "0": {
              "name": "punctuation.semicolon.iolite"
            }
          },
          "patterns": [
            {
              "include": "#types"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#variables"
            }
          ]
        }
      ]
    },
    "structs": {
      "patterns": [
        {
          "name": "meta.struct.definition.iolite",
          "begin": "\\b(struct)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.struct.iolite"
            },
            "2": {
              "name": "entity.name.struct.iolite"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.braces.iolite"
            }
          },
          "patterns": [
            {
              "include": "#types"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#variables"
            }
          ]
        }
      ]
    },
    "newtypes": {
      "patterns": [
        {
          "name": "meta.struct.definition.iolite",
          "begin": "\\b(struct)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.struct.iolite"
            },
            "2": {
              "name": "entity.name.struct.iolite"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.parens.iolite"
            }
          },
          "patterns": [
            {
              "include": "#types"
            }
          ]
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "entity.name.type.primitive.iolite",
          "match": "\\b(nil|int|float|byte|bool|rawptr)\\b"
        },
        {
          "name": "entity.name.type.pointer.iolite",
          "begin": "\\b(ptr|array)\\s*\\[",
          "beginCaptures": {
            "1": {
              "name": "storage.type.iolite"
            }
          },
          "end": "\\]",
          "patterns": [
            {
              "include": "#types"
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.iolite",
          "match": "\\b(if|else|while|for|in|return|break|continue|import)\\b"
        },
        {
          "name": "keyword.other.iolite",
          "match": "\\b(while|let|fun|as)\\b"
        },
        {
          "name": "keyword.bool.iolite",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "keyword.nil.iolite",
          "match": "\\b(nil)\\b"
        },
        {
          "name": "keyword.operator.math.iolite",
          "match": "(\\+|\\-|\\*|/(?!/)|\\%|\\=|\\<|\\>|\\&|\\||\\!|\\?|\\:|\\~|\\^)"
        },
        {
          "name": "keyword.operator.comparison.iolite",
          "match": "(\\=\\=|\\!\\=|\\<|\\>|\\<\\=|\\>\\=)"
        },
        {
          "name": "keyword.operator.dot.iolite",
          "match": "\\."
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.iolite",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.iolite",
          "match": "\\\\."
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.iolite",
          "match": "//.*$"
        }
      ]
    },
    "variables": {
      "name": "variable.other.iolite",
      "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.iolite",
          "match": "\\b[0-9]+\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.comma.iolite",
          "match": ","
        },
        {
          "name": "punctuation.semicolon.iolite",
          "match": ";"
        },
        {
          "name": "punctuation.braces.iolite",
          "match": "[{}]"
        },
        {
          "name": "punctuation.parens.iolite",
          "match": "[()]"
        }
      ]
    }
  },
  "scopeName": "source.iolite"
}
